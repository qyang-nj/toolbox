#!/usr/bin/env python3

"""
This script analyzes the gRPC log generated by Bazel and provides a summary of the data.

Usage:
1. Use `bazel build` with --remote_grpc_log=grpc.log
2. Use remote_client (from https://github.com/buildfarm/tools_remote) to convert grpc.log to JSON format and pipe it to this script:
    remote_client --grpc_log grpc.log printlog --format_json | bazel-grpc-log-analyzer.py

"""


import sys
import json


def human_readable_size(byte_count):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:
        if byte_count < 1024:
            return f"{byte_count:.2f} {unit}"
        byte_count /= 1024
    return f"{byte_count:.2f} PB"


def main():
    try:
        events = json.load(sys.stdin)
    except json.JSONDecodeError:
        print("Invalid JSON input.", file=sys.stderr)
        sys.exit(1)

    total_bytes_read, total_bytes_sent = 0, 0
    event_counter = {}
    cache_miss_actions = []

    for event in events:
        method_name = event['methodName']
        event_counter[method_name] = event_counter.get(method_name, 0) + 1

        match method_name:
            case "build.bazel.remote.execution.v2.ActionCache/GetActionResult":
                cache_miss = "response" not in event["details"]["getActionResult"]
                if cache_miss:
                    cache_miss_actions.append(f"{event["metadata"]["targetId"]} ({
                                              event["metadata"]["actionMnemonic"]})")
            case "google.bytestream.ByteStream/Read":
                bytes_read = int(event["details"]["read"]["bytesRead"])
                total_bytes_read += bytes_read
            case "google.bytestream.ByteStream/Write":
                bytes_send = int(event["details"]["write"]["bytesSent"])
                total_bytes_sent += bytes_send

    print(f"Total size downloaded : {human_readable_size(total_bytes_read)}")
    print(f"Total size uploaded   : {human_readable_size(total_bytes_sent)}")

    print("")
    print("Service call counter:")
    for method, count in event_counter.items():
        print(f"  {method}: {count}")

    print("")
    print("Cache misses for actions:")
    for target in cache_miss_actions:
        print(f"  {target}")


if __name__ == "__main__":
    main()
